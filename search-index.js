var searchIndex = {};
searchIndex["rz80"] = {"doc":"**rz80** is a Z80 chip family emulation library written in Rust which can be used as basis for\nwriting a full Z80-based computer emulator.","items":[[3,"Registers","rz80","CPU register access",null,null],[12,"i","","",0,null],[12,"r","","",0,null],[12,"im","","",0,null],[3,"Memory","","memory access",null,null],[12,"heap","","&#39;host&#39; memory",1,null],[3,"CPU","","Z80 CPU emulation",null,null],[12,"reg","","",2,null],[12,"halt","","",2,null],[12,"iff1","","",2,null],[12,"iff2","","",2,null],[12,"invalid_op","","",2,null],[12,"mem","","",2,null],[3,"PIO","","Z80 PIO emulation",null,null],[3,"CTC","","Z80 CTC emulation",null,null],[3,"Daisychain","","interrupt controller daisychain",null,null],[12,"num_ctrl","","",3,null],[12,"ctrl","","",3,null],[11,"new","","initialize a new Registers object",0,{"inputs":[],"output":{"name":"registers"}}],[11,"reset","","perform a CPU reset (clears some, but not all registers)",0,null],[11,"a","","get content of A register",0,null],[11,"f","","get content of F register (status flags)",0,null],[11,"b","","get content of B register",0,null],[11,"c","","get content of C register",0,null],[11,"d","","get content of D register",0,null],[11,"e","","get content of E register",0,null],[11,"h","","get content of H register",0,null],[11,"l","","get content of L register",0,null],[11,"w","","get content of undocumented W register (of WZ register pair)",0,null],[11,"set_a","","set content of A register",0,null],[11,"set_f","","set content of F register (status flags)",0,null],[11,"set_b","","set content of B register",0,null],[11,"set_c","","set content of C register",0,null],[11,"set_d","","set content of D register",0,null],[11,"set_e","","set content of E register",0,null],[11,"set_h","","set content of H register",0,null],[11,"set_l","","set content of L register",0,null],[11,"af","","get content of AF register pair",0,null],[11,"bc","","get content of BC register pair",0,null],[11,"de","","get content of DE register pair",0,null],[11,"hl","","get content of HL register pair",0,null],[11,"ix","","get content of IX register",0,null],[11,"iy","","get content of IY register",0,null],[11,"sp","","get content of SP register",0,null],[11,"wz","","get content of undocumented WZ register",0,null],[11,"af_","","get content of AF&#39; register",0,null],[11,"bc_","","get content of BC&#39; register",0,null],[11,"de_","","get content of DE&#39; register",0,null],[11,"hl_","","get content of HL&#39; register",0,null],[11,"wz_","","get content of undocumented WZ&#39; register",0,null],[11,"pc","","get content of PC register",0,null],[11,"set_af","","set content of AF register pair",0,null],[11,"set_bc","","set content of BC register pair",0,null],[11,"set_de","","set content of DE register pair",0,null],[11,"set_hl","","set content of HL register pair",0,null],[11,"set_ix","","set content of IX register",0,null],[11,"set_iy","","set content of IY register",0,null],[11,"set_sp","","set content of SP register",0,null],[11,"set_wz","","set content of undocumented WZ register",0,null],[11,"set_af_","","set content of AF&#39; register",0,null],[11,"set_bc_","","set content of BC&#39; register",0,null],[11,"set_de_","","set content of DE&#39; register",0,null],[11,"set_hl_","","set content of HL&#39; register",0,null],[11,"set_wz_","","set content of undocumented WZ&#39; register",0,null],[11,"set_pc","","set content of PC register",0,null],[11,"inc_pc","","increment the PC register by some value",0,null],[11,"dec_pc","","decrement the PC register by some value",0,null],[11,"r8","","get 8-bit register by index (where index is 3-bit register id from Z80 instruction)",0,null],[11,"set_r8","","set 8-bit register by index (where index is 3-bit register id from Z80 instruction)",0,null],[11,"r8i","","get 8-bit register by index, H,L never patched to IXH,IXL,IYH,IYL",0,null],[11,"set_r8i","","set 8-bit register by index, H,L never patched to IXH,IXL,IYH,IYL",0,null],[11,"r16i","","get 16-bit register by direct index (AF, BC, DE, HL, etc)",0,null],[11,"set_r16i","","set 16-bit register by direct index (AF, BC, DE, ...)",0,null],[11,"r16sp","","get 16-bit register by 2-bit index with mapping through SP-table",0,null],[11,"set_r16sp","","set 16-bit register by 2-bit index with mapping through SP-table",0,null],[11,"r16af","","get 16-bit register by 2-bit index with mapping through AF-table",0,null],[11,"set_r16af","","set 16-bit register by 2-bit index with mapping through AF-table",0,null],[11,"swap","","swap 2 16-bit registers by direct index (HL, BC, DE, ...)",0,null],[11,"patch_ix","","patch register mapping tables for use of IX instead of HL",0,null],[11,"patch_iy","","patch register mapping tables for use of IY instead of HL",0,null],[11,"unpatch","","unpatch register mapping tables to use HL instead of IX/IY",0,null],[11,"new","","return new, unmapped memory object",1,{"inputs":[],"output":{"name":"memory"}}],[11,"new_64k","","return new memory object with 64 kByte mapped, writable memory (for testing)",1,{"inputs":[],"output":{"name":"memory"}}],[11,"map","","map a chunk of uninitialized heap memory to CPU-mapped memory",1,null],[11,"map_bytes","","map a chunk of heap memory, and initialize it",1,null],[11,"unmap","","unmap a chunk heap memory",1,null],[11,"unmap_layer","","unmap all pages in a layer",1,null],[11,"unmap_all","","unmap all pages in all layers",1,null],[11,"r8","","read unsigned byte from 16-bit address",1,null],[11,"rs8","","read signed byte from 16-bit address",1,null],[11,"w8","","write unsigned byte to 16-bit address",1,null],[11,"w8f","","write unsigned byte, ignore write-protection flag",1,null],[11,"r16","","read unsigned word from 16-bit address",1,null],[11,"w16","","write unsigned word to 16-bit address",1,null],[11,"write","","write a whole chunk of memory, ignore write-protection",1,null],[11,"new","","initialize a new Z80 CPU object",2,{"inputs":[],"output":{"name":"cpu"}}],[11,"new_64k","","initialize a new CPU object with 64K RAM (for testing)",2,{"inputs":[],"output":{"name":"cpu"}}],[11,"reset","","reset the cpu",2,null],[11,"step","","decode and execute one instruction",2,null],[11,"do_op","","execute a single &#39;main-instruction&#39;",2,null],[11,"irq","","",2,null],[11,"reti","","",2,null],[11,"handle_irq","","",2,null],[11,"halt","","",2,null],[11,"push","","",2,null],[11,"pop","","",2,null],[11,"rst","","",2,null],[11,"alu8","","",2,null],[11,"add8","","",2,null],[11,"adc8","","",2,null],[11,"sub8","","",2,null],[11,"sbc8","","",2,null],[11,"cp8","","",2,null],[11,"neg8","","",2,null],[11,"and8","","",2,null],[11,"or8","","",2,null],[11,"xor8","","",2,null],[11,"inc8","","",2,null],[11,"dec8","","",2,null],[11,"rot","","",2,null],[11,"rlc8","","",2,null],[11,"rlca8","","",2,null],[11,"rrc8","","",2,null],[11,"rrca8","","",2,null],[11,"rl8","","",2,null],[11,"rla8","","",2,null],[11,"rr8","","",2,null],[11,"rra8","","",2,null],[11,"sla8","","",2,null],[11,"sll8","","",2,null],[11,"sra8","","",2,null],[11,"srl8","","",2,null],[11,"rld","","",2,null],[11,"rrd","","",2,null],[11,"bit","","",2,null],[11,"ibit","","",2,null],[11,"add16","","",2,null],[11,"adc16","","",2,null],[11,"sbc16","","",2,null],[11,"djnz","","",2,null],[11,"daa","","",2,null],[11,"cpl","","",2,null],[11,"scf","","",2,null],[11,"ccf","","",2,null],[11,"ret","","",2,null],[11,"call","","",2,null],[11,"retcc","","",2,null],[11,"callcc","","",2,null],[11,"ldi","","",2,null],[11,"ldd","","",2,null],[11,"ldir","","",2,null],[11,"lddr","","",2,null],[11,"cpi","","",2,null],[11,"cpd","","",2,null],[11,"cpir","","",2,null],[11,"cpdr","","",2,null],[11,"inp","","",2,null],[11,"outp","","",2,null],[11,"ini","","",2,null],[11,"ind","","",2,null],[11,"inir","","",2,null],[11,"indr","","",2,null],[11,"outi","","",2,null],[11,"outd","","",2,null],[11,"otir","","",2,null],[11,"otdr","","",2,null],[11,"new","","initialize new PIO object",4,{"inputs":[{"name":"usize"}],"output":{"name":"pio"}}],[11,"reset","","reset the PIO",4,null],[11,"write_control","","write to control register",4,null],[11,"read_control","","read control register",4,null],[11,"write_data","","write data to PIO channel",4,null],[11,"read_data","","read data from PIO channel",4,null],[11,"write","","write data from peripheral device into PIO",4,null],[11,"new","","initialize new CTC object",5,{"inputs":[{"name":"usize"}],"output":{"name":"ctc"}}],[11,"reset","","reset the CTC",5,null],[11,"write","","write a CTC control register",5,null],[11,"read","","read current counter or timer value",5,null],[11,"trigger","","externally provided trigger/pulse signal, updates counters",5,null],[11,"update_timers","","update the CTC channel timers",5,null],[11,"new","","initialize a new daisychain",3,{"inputs":[{"name":"usize"}],"output":{"name":"daisychain"}}],[11,"reset","","reset interrupt controllers in daisychain",3,null],[11,"irq","","request an interrupt from an interrupt controller, called by bus",3,null],[11,"irq_ack","","CPU acknowledges interrupt request, return the interrupt vector",3,null],[11,"irq_reti","","CPU executes a RETI, this enabled interrupts on downstream controllers",3,null],[6,"RegT","","generic integer type for 8- and 16-bit values",null,null],[17,"CF","","CPU carry flag",null,null],[17,"NF","","CPU add/subtract flag",null,null],[17,"VF","","CPU overflow flag (same as parity)",null,null],[17,"PF","","CPU parity flag (same as overflow)",null,null],[17,"XF","","CPU undocumented &#39;X&#39; flag",null,null],[17,"HF","","CPU half carry flag",null,null],[17,"YF","","CPU undocumented &#39;Y&#39; flag",null,null],[17,"ZF","","CPU zero flag",null,null],[17,"SF","","CPU sign flag",null,null],[17,"PIO_A","","PIO channel A",null,null],[17,"PIO_B","","PIO channel B",null,null],[17,"CTC_0","","CTC channel 0",null,null],[17,"CTC_1","","CTC channel 1",null,null],[17,"CTC_2","","CTC channel 2",null,null],[17,"CTC_3","","CTC channel 3",null,null],[8,"Bus","","system bus trait",null,null],[11,"cpu_inp","","CPU reads from I/O port",6,null],[11,"cpu_outp","","CPU writes to I/O port",6,null],[11,"irq","","request an interrupt, called by a device to generate interrupt",6,null],[11,"irq_cpu","","forward an interrupt-request to CPU, called by daisychain",6,null],[11,"irq_ack","","interrupt request acknowledge (called by CPU), return interrupt vector",6,null],[11,"irq_reti","","notify interrupt daisy chain that CPU executed a RETI",6,null],[11,"pio_outp","","PIO output callback",6,null],[11,"pio_inp","","PIO input callback",6,null],[11,"pio_rdy","","PIO channel rdy line has changed",6,null],[11,"pio_irq","","interrupt request from PIO",6,null],[11,"ctc_write","","CTC write callback",6,null],[11,"ctc_zero","","CTC counter/timer reached zero",6,null],[11,"ctc_irq","","interrupt request from CTC",6,null],[11,"cpu_inp","","CPU reads from I/O port",6,null],[11,"cpu_outp","","CPU writes to I/O port",6,null],[11,"irq","","request an interrupt, called by a device to generate interrupt",6,null],[11,"irq_cpu","","forward an interrupt-request to CPU, called by daisychain",6,null],[11,"irq_ack","","interrupt request acknowledge (called by CPU), return interrupt vector",6,null],[11,"irq_reti","","notify interrupt daisy chain that CPU executed a RETI",6,null],[11,"pio_outp","","PIO output callback",6,null],[11,"pio_inp","","PIO input callback",6,null],[11,"pio_rdy","","PIO channel rdy line has changed",6,null],[11,"pio_irq","","interrupt request from PIO",6,null],[11,"ctc_write","","CTC write callback",6,null],[11,"ctc_zero","","CTC counter/timer reached zero",6,null],[11,"ctc_irq","","interrupt request from CTC",6,null]],"paths":[[3,"Registers"],[3,"Memory"],[3,"CPU"],[3,"Daisychain"],[3,"PIO"],[3,"CTC"],[8,"Bus"]]};
initSearch(searchIndex);
